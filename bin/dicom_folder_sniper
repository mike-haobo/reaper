#!/usr/bin/env python
# -*- coding: utf-8 -*-

# vim: filetype=python

import os
import sys
import shutil
import logging
import argparse

import reaper.dcm
import reaper.util
import reaper.upload
import reaper.tempdir as tempfile

logging.basicConfig(
    format='%(message)s',
)
log = logging.getLogger()


DEFAULT_FIELD_NAMES = {
    'subject_code':         'PatientID',
    'session_label':        'StudyDescription',
    'acquisition_label':    'SeriesDescription',
    'dataset_label_prefix': 'SeriesNumber',
    'exam_number':          'StudyID',
}


def scandir(path, group_related_series=False, de_identify=False, symlinks=False, **kwargs):
    field_names = DEFAULT_FIELD_NAMES
    field_names.update(kwargs)

    log.warning('Scanning subfolders')
    sessions = {}
    for dirpath, dirnames, filenames in os.walk(path, followlinks=symlinks):
        dirnames[:] = [dn for dn in dirnames if not dn.startswith('.')] # use slice assignment to influence walk
        filepaths = [os.path.join(dirpath, fn) for fn in filenames if not fn.startswith('.')] # ignore dotfiles
        log.info('  %s', os.path.relpath(dirpath, path))

        for fp in filepaths:
            try:
                dcm = reaper.dcm.DicomFile(fp)
            except reaper.dcm.DicomFileError:
                log.info('    Ignoring non-DICOM file %s', fp)
                continue

            try:
                study_uid = dcm.raw.StudyInstanceUID
                series_uid = dcm.raw.SeriesInstanceUID
                primary_series_uid = dcm.raw.get('RelatedSeriesSequence', [{}])[0].get('SeriesInstanceUID')
                image_uid = dcm.raw.SOPInstanceUID
            except AttributeError:
                log.warning('%s does not contain all required DICOM UIDs - skipping', fp)
                continue

            acq_uid = primary_series_uid if primary_series_uid and group_related_series else series_uid
            if not de_identify:
                subj_code = dcm.get_tag(field_names['subject_code'], 'Unknown')
            else:
                subj_code = 'ex' + dcm.get_tag(field_names['exam_number'], '0')
            sess_label = dcm.get_tag(field_names['session_label'], 'Untitled')
            acq_label = dcm.get_tag(field_names['acquisition_label'], 'Untitled')
            ds_label = dcm.get_tag(field_names['dataset_label_prefix'], 'Unknown') + ' - ' +  acq_label

            sess = sessions.setdefault(study_uid, {
                'subject': subj_code,
                'label': sess_label,
                'acquisitions': {},
            })
            acq = sess['acquisitions'].setdefault(acq_uid, {
                'label': acq_label,
                'datasets': {},
            })
            ds = acq['datasets'].setdefault(series_uid, {
                'type': dcm.raw.get('ImageType'), # for debug purposes only
                'label': ds_label,
                'images': {},
            })
            ds['images'][image_uid] = fp

            if group_related_series and not primary_series_uid:
                acq['label'] = acq_label # force the label for primary series

    log.info('')
    return sessions


def emit_summary(sessions, project, group, de_identify=False):
    sess_cnt = len(sessions)
    acq_cnt = sum([len(sess['acquisitions']) for sess in sessions.itervalues()])
    file_cnt = ds_cnt = 0
    for sess in sessions.itervalues():
        for acq in sess['acquisitions'].itervalues():
            for ds in acq['datasets'].itervalues():
                file_cnt += len(ds['images'])
                ds_cnt += 1
    log.warning('Found %d Acquisition(s) in %d Session(s)', acq_cnt, sess_cnt)
    if de_identify:
        log.warning('Will De-Identify and upload %d DICOM files as %d datasets', file_cnt, ds_cnt)
    else:
        log.warning('Will upload %d DICOM files as %d datasets', file_cnt, ds_cnt)

    if log.isEnabledFor(logging.INFO):
        log.info('\nDerived hierarchy')
        log.info('  %s\n    %s', project, group)
        for sess in sessions.itervalues():
            log.info('      ' + sess['label'] + ' >>> ' + sess['subject'])
            for acq in sess['acquisitions'].itervalues():
                log.info('        ' + acq['label'])
                for ds in acq['datasets'].itervalues():
                    log.info('          %s (%d images)', ds['label'], len(ds['images']))
        log.info('')


def upload(sessions, group, project, upload_function, de_identify=False, timezone=None):
    metadata = {}
    metadata['group'] = {'_id': group}
    metadata['project'] = {'label': project}
    for sid, sess in sessions.iteritems():
        metadata['session'] = {}
        metadata['session']['uid'] = sid
        metadata['session']['label'] = sess['label']
        metadata['session']['subject'] = {'code': sess['subject']}
        for aid, acq in sess['acquisitions'].iteritems():
            metadata['acquisition'] = {}
            metadata['acquisition']['uid'] = aid
            metadata['acquisition']['label'] = acq['label']
            for ds in acq['datasets'].itervalues():
                with tempfile.TemporaryDirectory() as tempdir:
                    if de_identify:
                        paths = []
                        log.info('De-id\'ing    %s', ds['label'])
                        for filepath in ds['images'].itervalues():
                            newpath = os.path.join(tempdir, os.path.basename(filepath))
                            paths.append(newpath)
                            shutil.copyfile(filepath, newpath)
                            reaper.dcm.DicomFile(newpath, de_identify=True, timezone=timezone)
                    else:
                        paths = [path for path in ds['images'].itervalues()]
                    log.info('Packaging    %s', ds['label'])
                    archive = reaper.util.create_archive(paths, ds['label'], outdir=tempdir)
                    metadata['acquisition']['files'] = [{'type': 'dicom', 'name': os.path.basename(archive)}]
                    reaper.upload.metadata_upload(archive, metadata, upload_function)


DESCRIPTION = u"""
"""


def main():
    arg_parser = argparse.ArgumentParser(description=DESCRIPTION, formatter_class=argparse.RawDescriptionHelpFormatter)
    arg_parser.add_argument('path', help='path to reap')
    arg_parser.add_argument('uri', help='API URL')
    arg_parser.add_argument('group', help='Group ID')
    arg_parser.add_argument('project', help='Project Name')
    arg_parser.add_argument('-i', '--insecure', action='store_true', help='do not verify server SSL certificates')
    arg_parser.add_argument('-y', '--yes', action='store_true', help='do not prompt to continue')
    arg_parser.add_argument('-z', '--timezone', help='instrument timezone [system timezone]')
    arg_parser.add_argument('-l', '--loglevel', default='warning', help='log level [WARNING]')
    arg_parser.add_argument('-s', '--symlinks', action='store_true', help='follow symbolic links that resolve to directories')

    auth_group = arg_parser.add_mutually_exclusive_group()
    auth_group.add_argument('--secret', help='shared API secret')
    auth_group.add_argument('--key', help='user API key')
    arg_parser.add_argument('--root', action='store_true', help='send API requests as site admin')

    arg_parser.add_argument('--group-related-series', action='store_true', help='group derived Series into the same Acquisition')
    arg_parser.add_argument('--de-identify', action='store_true', help='de-identify data before upload')
    arg_parser.add_argument('--tag-override', nargs=2, action='append', default=[], help='DICOM tag override')

    args = arg_parser.parse_args(sys.argv[1:] or ['--help'])

    log.setLevel(getattr(logging, args.loglevel.upper()))
    log.debug('Parsed arguments:\n%s\n', vars(args))

    args.timezone = reaper.util.validate_timezone(args.timezone)
    if args.timezone is None:
        log.error('invalid timezone')
        sys.exit(1)

    args.path = os.path.expanduser(args.path)
    if not os.path.isdir(args.path):
        log.error('Path        %s is not a directory or does not exist', args.path)
        sys.exit(1)

    secret_info = ('DICOM Folder Sniper', 'System Import', args.secret) if args.secret else None
    api_request, upload_function = reaper.upload.upload_function(args.uri, secret_info, args.key, args.root, args.insecure, '/api/upload/uid')

    tag_override = {k: v if v.lower() != 'null' else None for k, v in args.tag_override}

    sessions = scandir(args.path, args.group_related_series, args.de_identify, args.symlinks, **tag_override)
    emit_summary(sessions, args.group, args.project, args.de_identify)
    if not args.yes:
        try:
            raw_input('Press Enter to process and upload all data or Ctrl-C to abort...')
        except KeyboardInterrupt:
            print
            sys.exit(1)
    log.info('')

    try:
        #upsert_groups(groups, api_request) FIXME check for write access to project
        upload(sessions, args.group, args.project, upload_function, args.de_identify, args.timezone)
    except Exception as ex:
        log.critical(str(ex))
        log.critical('Unexpected error - bailing out')
        sys.exit(1)


if __name__ == '__main__':
    main()
