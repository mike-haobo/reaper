#!/usr/bin/env python

# vim: filetype=python

import os
import sys
import json
import logging
import argparse

import reaper.scu
import reaper.util

log = logging.getLogger('series_finder')
log.info('blah')


arg_parser = argparse.ArgumentParser()
arg_parser.add_argument('host', help='remote hostname or IP')
arg_parser.add_argument('port', help='remote port')
arg_parser.add_argument('aet', help='local AE title')
arg_parser.add_argument('aec', help='remote AE title')
arg_parser.add_argument('-k', '--query', nargs=2, action='append', default=[], help='query tuple')
arg_parser.add_argument('-f', '--file', help='JSON file to update')
args = arg_parser.parse_args()
args.query = dict(args.query)


scu_ = reaper.scu.SCU(args.host, args.port, None, args.aet, args.aec)

scu_studies = scu_.find(reaper.scu.StudyQuery(**reaper.scu.SCUQuery(**args.query)))
log.info('Found %d DICOM Studies', len(scu_studies))

studies = {}
series_cnt = 0
for study in scu_studies:
    scu_series = scu_.find(reaper.scu.SeriesQuery(**reaper.scu.SCUQuery(StudyInstanceUID=study.StudyInstanceUID)))
    studies[study.StudyInstanceUID] = [i.SeriesInstanceUID for i in scu_series]
    series_cnt += len(scu_series)
log.info('Found %d DICOM Series', series_cnt)


if args.file:
    try:
        with open(args.file) as fd:
            state = json.load(fd)
    except IOError:
        log.error('JSON file %s not found', args.file)
        sys.exit(1)
    else:
        log.info('Updating JSON file %s', args.file)
    success_cnt = fail_cnt = 0
    for suid in sum(studies.values(), []):
        try:
            state[suid]['reaped'] = False
            success_cnt += 1
        except KeyError as ex:
            fail_cnt += 1
    util.write_state_file(args.file, state)
    log.info('Successfully updated %d records', success_cnt)
    if fail_cnt:
        log.error('Failed to update %d records', fail_cnt)
        sys.exit(1)
else:
    print json.dumps(studies, indent=4, separators=(',', ': '))
